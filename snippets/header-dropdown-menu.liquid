{% comment %}
  Renders a standard dropdown style menu for the header.

  Usage:
  {% render 'header-dropdown-menu' %}
{% endcomment %}

<nav class="header__inline-menu">
  <ul class="list-menu list-menu--inline" role="list">
    {%- for link in section.settings.menu.links -%}
      <li>
        {%- if link.links != blank -%}
          <header-menu>
            <details id="Details-HeaderMenu-{{ forloop.index }}" style="position: static">
              {% assign parts = link.title | split: '|' %}
              <summary
                id="HeaderMenu-{{ link.handle }}"
                class="header__menu-item list-menu__item link focus-inset"
              >
                {{- parts[0] | strip | escape -}}
                {{- 'icon-caret.svg' | inline_asset_content -}}
              </summary>

              {% if parts.size >= 2 %}
                {% render 'sub-menu-item', forloop:forloop, link:link, menuListType: parts[1] | strip %}
              {%- else -%}
                {% render 'sub-menu-item', forloop: forloop, link: link %}
              {%- endif -%}
            </details>
          </header-menu>
        {%- else -%}
          <a
            id="HeaderMenu-{{ link.handle }}"
            href="{{ link.url }}"
            class="header__menu-item list-menu__item link link--text focus-inset"
            {% if link.current %}
              aria-current="page"
            {% endif %}
          >
            <span
              {%- if link.current %}
                class="header__active-menu-item"
              {% endif %}
            >
              {{- link.title | escape -}}
              {% comment %} 333 {% endcomment %}
            </span>
          </a>
        {%- endif -%}
      </li>
    {%- endfor -%}
  </ul>
</nav>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    let currentlyOpenMenu = null;
    let globalCloseTimeout = null;

    const menuItems = document.querySelectorAll('.header__inline-menu details');

    function closeCurrentlyOpenMenu() {
      if (currentlyOpenMenu) {
        currentlyOpenMenu.open = false;
        currentlyOpenMenu = null;
      }
    }

    menuItems.forEach((item) => {
      item.addEventListener('mouseenter', () => {
        if (globalCloseTimeout) {
          clearTimeout(globalCloseTimeout);
          globalCloseTimeout = null;
        }

        if (currentlyOpenMenu && currentlyOpenMenu !== item) {
          currentlyOpenMenu.open = false;
        }

        item.open = true;
        currentlyOpenMenu = item;
      });

      item.addEventListener('mouseleave', (event) => {
        const relatedTarget = event.relatedTarget;
        const targetMenu = relatedTarget ? relatedTarget.closest('.header__inline-menu details') : null;

        if (targetMenu && targetMenu !== item) {
          item.open = false;
          targetMenu.open = true;
          currentlyOpenMenu = targetMenu;
        } else if (!targetMenu) {
          if (globalCloseTimeout) {
            clearTimeout(globalCloseTimeout);
          }

          globalCloseTimeout = setTimeout(() => {
            closeCurrentlyOpenMenu();
            globalCloseTimeout = null;
          }, 200);
        }
      });

      const dropdownContent = item.querySelector('.header__submenu, .list-menu');
      if (dropdownContent) {
        dropdownContent.addEventListener('mouseleave', (event) => {
          const relatedTarget = event.relatedTarget;
          const isMenuArea =
            relatedTarget &&
            (relatedTarget.closest('.header__inline-menu details') ||
              relatedTarget.closest('.header__submenu, .list-menu'));

          if (!isMenuArea) {
            if (globalCloseTimeout) {
              clearTimeout(globalCloseTimeout);
            }

            globalCloseTimeout = setTimeout(() => {
              closeCurrentlyOpenMenu();
              globalCloseTimeout = null;
            }, 200);
          }
        });
      }
    });
  });
</script>
